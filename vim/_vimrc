" this is my vimrc

" automatically reload vimrc when its saved
" au BufWritePost .vimrc so ~/.vimrc

" BEGIN VUNDLE CONFIG
set nocompatible               " be iMproved
filetype off                      " required!
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle (e.g. for updates)
Bundle "gmarik/vundle"

" Vundle bundles
Bundle "tpope/vim-fugitive"
Bundle "airblade/vim-gitgutter"
Bundle "skammer/vim-css-color"
Bundle "scrooloose/nerdcommenter"
Bundle "scrooloose/nerdtree"
Bundle "scrooloose/syntastic"
Bundle "vim-scripts/taglist.vim"
Bundle "kien/ctrlp.vim"
Bundle "kwbdi.vim"
Bundle "Lokaltog/vim-easymotion"
Bundle "jelera/vim-javascript-syntax"
Bundle "bling/vim-airline"
Bundle "Lokaltog/vim-powerline"
Bundle "stephenmckinney/vim-solarized-powerline"
Bundle "xolox/vim-misc"
Bundle "xolox/vim-session"
Bundle "fatih/vim-go"
Bundle "majutsushi/tagbar"
Bundle 'ervandew/supertab'
Bundle "altercation/vim-colors-solarized"
Bundle "jistr/vim-nerdtree-tabs"
Bundle "hashivim/vim-terraform"

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

syntax enable

set background=dark
colorscheme solarized

set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on     " required!
syntax on
" END VUNDLE CONFIG

" automatically open the error window when there are errors and close it when there are none
let g:syntastic_auto_loc_list=1

" Only reload the markdown in the browser on save / a while after leaving
" insert mode
let g:instant_markdown_slow = 1
filetype plugin on

au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
au BufRead,BufNewFile *.go set filetype=go syntax=go
au BufRead,BufNewFile *.py set filetype=python syntax=python
"au BufRead,BufNewFile *bash* let g:is_bash=1
"au BufRead,BufNewFile *bash* setf sh

" syntax check with ctrl+s
nnoremap <C-w>E :SyntasticCheck<CR>
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
let g:syntastic_python_checkers = ["pylint"]
let g:syntastic_javascript_checkers = ["jshint"]
let g:syntastic_sh_checkers = ["bashate"]

" ignore syntastic errors temporarily
map \t :SyntasticToggleMode<CR> :SyntasticToggleMode<CR>

" disable YouCompleteMe default mapping for \d and make our shortcut for Gdiff
let g:ycm_key_detailed_diagnostics = ""
let g:ycm_auto_trigger = 0
noremap \d :Gdiff<CR>

" disable gitgutter by default and map \f to toggle it
let g:gitgutter_enabled = 1

"highlight SignColumn guibg=darkgrey
" highlight GitGutterAdd ctermfg=green guifg=darkgreen
" highlight GitGutterChange ctermfg=yellow guifg=darkyellow
" highlight GitGutterDelete ctermfg=red guifg=darkred
"highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow

noremap \f :ToggleGitGutter<CR>

" toggle line wrapping
noremap \q :set invwrap<CR>

" shortcut for git status via fugitive
noremap \s :Gstatus<CR>
noremap \a :Gwrite<CR>

" set t_Co=256
set undofile
set number
set incsearch
set ignorecase
set showcmd
set autoindent
set hlsearch
set ruler
set cpoptions+=$
set tabstop=2
set shiftwidth=2
set softtabstop=2
filetype indent on
set smarttab
set expandtab
set wildmode=longest,list,full
set wildmenu
set foldnestmax=10
set nofoldenable
set foldlevel=1
set hidden
set backspace=indent,eol,start
set undodir=~/.vim/undodir
set smartcase
map <C-up> :tabr<cr>
map <C-down> :tabl<cr>
map <C-h> :tabp<cr>
map <C-l> :tabn<cr>
map <space> /*())(<cr>
cmap tn tabnew
cmap vs vsplit
cmap bu buffer

" map some useful nerdtree commands
" noremap <c-n> :NERDTreeToggle<CR>
" noremap <c-l> :NERDTreeFind<CR>
cmap ntt NERDTreeToggle
cmap ntf NERDTreeFind

" for autocompletion of brackets
inoremap { {}<Left>
inoremap {<CR> {<CR>}<Esc>O
inoremap {{ {
inoremap {} {}

inoremap ( ()<Left>
inoremap (<CR> (<CR>)<Esc>O
inoremap (( (
inoremap () ()

inoremap [ []<Left>
inoremap [<CR> [<CR>]<Esc>O
inoremap [[ [
inoremap [] []
" ------------------------------

nnoremap <f4> :buffers<CR>:buffer<Space>
nnoremap <F8> :TagbarToggle<CR>
nnoremap <F7> :TagbarOpen fj<CR>
nmap <C-x> :w<CR>
" move down/up row-wise instead of line-wise
nmap j gj
nmap k gk
nmap <C-v> :w<CR>:make %<CR>:cw<CR>
nmap <cr> G

set laststatus=2
set t_Co=256

let NERDTreeIgnore = ["\.pyc$"]
autocmd  BufRead,BufNewFile *.html setfiletype htmldjango
highlight Normal ctermbg=None

" golang indentation
autocmd FileType go setlocal noexpandtab shiftwidth=8 tabstop=8 softtabstop=4

" python support
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8
\ formatoptions+=croq softtabstop=4 smartindent
\ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
let python_highlight_all=1
autocmd FileType pyrex setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with

let g:pyflakes_use_quickfix = 0

let pymode_rope_vim_completion=1
let pymode_rope_extended_complete=1
let pymode_lint=1
cmap ln PyLintToggle

" Sane Ignore For ctrlp
let g:ctrlp_custom_ignore = {"dir": "\.git$\|\.hg$\|\ve$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|data\|log\|tmp$", "file": "\.exe$\|\.so$\|\.dat$|\.swp$"}
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*ve/*,*node_modules/*,*.so,*.pyc     " Linux/MacOSX

" cancel search highlighting
nnoremap <C-c> :nohlsearch<CR>

" automatically vimgrep for the latest search term in the *current buffer
" only*
nmap \g :vimgrep /<C-r>// %<CR>:botright copen<CR>

nmap \n :cn<CR>
nmap \p :cp<CR>


" YankRing shortcut
nmap \r :YRShow<CR>

" make up/down keys not move over wrapped lines - when you want to go down,
" always go directly down
nmap j gj
nmap k gk

" in ctrlp, set working directory to closest to .git
let g:ctrlp_working_path_mode=2

" Markdown to HTML
nmap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags

" Since we re-mapped capital J, map Ctrl+J to the default J which is the join line operation
nore <C-J> J

let g:clang_user_options="|| exit 0"

" Taglist stuff
let Tlist_Ctags_Cmd="/usr/local/bin/ctags"
let Tlist_GainFocus_On_ToggleOpen=1
let Tlist_Enable_Fold_Column=0
highlight MyTagListFileName guifg=#00d2ff ctermfg=blue
highlight MyTagListTitle guifg=#ff0086 gui=bold ctermfg=red
map ) :TlistToggle<CR>

" type Sc after highlighting a block to add comment in django templates
" NOTE: 99 is the ascii code for "c"
let b:surround_99 = "{% comment %}\r{% endcomment %}"

au FileType javascript call JavaScriptFold()

python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

let g:Powerline_colorscheme='solarized256_dark'

" go settings
let g:go_play_open_browser = 0
let g:go_fmt_fail_silently = 1
let g:go_disable_autoinstall = 1
